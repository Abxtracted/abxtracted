!function(){"use strict";window.app=angular.module("app",["ngResource","ngCookies","ui.router","ngMaterial","templates"]).config(["$mdThemingProvider",function(e){e.theme("default").dark()}])}(window),function(){"use strict";app.config(["$httpProvider",function(e){e.interceptors.push("authInterceptor")}])}(),function(){"use strict";function e(e,t){function n(e){return"/views/"+e+"/"+e+"-template.html"}t.otherwise("/login"),e.state("login",{url:"/login",templateUrl:n("login")}).state("dashboard",{url:"/dashboard",templateUrl:n("dashboard")}).state("projects-new",{url:"/projects/new",templateUrl:n("new-project")}).state("projects",{url:"/projects/:id",templateUrl:n("project")}).state("experiments-new",{url:"/experiments/new",templateUrl:n("new-experiment")})}angular.module("app").config(["$stateProvider","$urlRouterProvider",e])}(),function(){"use strict";app.constant("API",{BASE_URL:"http://localhost:8080/"})}(),function(){app.constant("COOKIES",{AUTH:{TOKEN:"JSESSIONID"}})}(),function(){"use strict";app.factory("authInterceptor",["$cookies","COOKIES",function(e,t){return{request:function(n){var o=e.get(t.AUTH.TOKEN);return n.headers=n.headers||{},o&&(n.headers[t.AUTH.TOKEN]=o),n}}}])}(),function(){app.factory("experimentsResource",["$resource","API",function(e,t){var n=t.BASE_URL+"experiment";return e(n,{},{})}])}(),function(){app.factory("projectsResource",["$resource","API",function(e,t){var n=t.BASE_URL+"projects";return e(n,{},{})}])}(),function(){"use strict";app.component("icon",{templateUrl:"/components/icon/icon-template.html",bindings:{icon:"@"}})}(),function(){"use strict";app.component("loginForm",{templateUrl:"/components/login-form/login-form-template.html"})}(),function(e){"use strict";function t(){function e(e,t){e.copy=function(){var e=t.find("code")[0],n=document.createRange();n.selectNodeContents(e);var o=window.getSelection();o.removeAllRanges(),o.addRange(n),document.execCommand("copy"),o.removeAllRanges()}}return{restrict:"E",templateUrl:"/components/key-select/key-select-template.html",replace:!0,link:e}}e.directive("keySelect",t)}(window.app),function(){"use strict";function e(e){var t=this;t.save=function(){e.save({name:t.experiment.name})}}app.component("newExperimentForm",{templateUrl:"/components/new-experiment-form/new-experiment-form-template.html",controller:["experimentsResource",e]})}(),function(){"use strict";app.component("logo",{templateUrl:"/components/logo/logo-template.html"})}(),function(){"use strict";function e(e){var t=this;t.save=function(){e.save({name:t.project.name})}}app.component("newProjectForm",{templateUrl:"/components/new-project-form/new-project-form-template.html",controller:["projectsResource",e]})}(),function(){"use strict";function e(e){var t=this;t.onMenuItemClick=function(t){e.path("/projects/"+t)},t.projects=[{name:"Teleflik",id:123}]}app.component("projectsMenu",{templateUrl:"/components/projects-menu/projects-menu-template.html",controller:["$location",e]})}(),function(){"use strict";app.component("viewport",{templateUrl:"/components/viewport/viewport-template.html",transclude:!0,bindings:{title:"="}})}(),function(){"use strict";function e(){}app.component("mainLayout",{templateUrl:"/layouts/main-layout/main-layout-template.html",transclude:!0,bindings:{viewportTitle:"@"},controller:e})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
