!function(){"use strict";window.app=angular.module("app",["ngResource","ngCookies","ui.router","ngMaterial","templates"]).config(["$mdThemingProvider",function(t){t.theme("default").dark()}])}(window),function(){"use strict";app.config(["$httpProvider",function(t){t.interceptors.push("authInterceptor")}])}(),function(){"use strict";app.run(["$rootScope","$state","authService",function(t,e,n){function o(t,n){r(n)||(t.preventDefault(),e.go("login"))}function r(t){return t&&t.isPublic||n.isAuthenticated()}t.$on("$stateChangeStart",o)}])}(),function(){"use strict";function t(t,e){function n(t){return"/views/"+t+"/"+t+"-template.html"}e.otherwise("/login"),t.state("login",{url:"/login",isPublic:!0,templateUrl:n("login")}).state("dashboard",{url:"/dashboard",templateUrl:n("dashboard")}).state("projects-new",{url:"/projects/new",templateUrl:n("new-project")}).state("projects",{url:"/projects/:id",templateUrl:n("project")}).state("experiments-new",{url:"/experiments/new",templateUrl:n("new-experiment")})}angular.module("app").config(["$stateProvider","$urlRouterProvider",t])}(),function(){"use strict";app.constant("API",{BASE_URL:"http://localhost:8080/"})}(),function(){app.constant("COOKIES",{AUTH:{TOKEN:"auth-token"}})}(),function(){"use strict";app.factory("authInterceptor",["$cookies","COOKIES",function(t,e){return{request:function(n){var o=t.get(e.AUTH.TOKEN);return n.headers=n.headers||{},o&&(n.headers[e.AUTH.TOKEN]=o),n}}}])}(),function(){app.factory("experimentsResource",["$resource","API",function(t,e){var n=e.BASE_URL+"experiment";return t(n,{},{})}])}(),function(){app.factory("projectsResource",["$resource","API",function(t,e){var n=e.BASE_URL+"projects";return t(n,{},{})}])}(),function(){app.service("authService",["$cookies","COOKIES",function(t,e){var n={};return n.isAuthenticated=function(){return t.get(e.AUTH.TOKEN)},n}])}(),function(){"use strict";app.component("icon",{templateUrl:"/components/icon/icon-template.html",bindings:{icon:"@"}})}(),function(t){"use strict";function e(){function t(t,e){t.copy=function(){var t=e.find("code")[0],n=document.createRange();n.selectNodeContents(t);var o=window.getSelection();o.removeAllRanges(),o.addRange(n),document.execCommand("copy"),o.removeAllRanges()}}return{restrict:"E",templateUrl:"/components/key-select/key-select-template.html",replace:!0,link:t}}t.directive("keySelect",e)}(window.app),function(){"use strict";function t(t,e,n){var o=this,r="http://localhost:8080/auth/login",c="redirect_to=http://localhost:3000/#";o.login=function(){var e=[r,c].join("?");t.location.href=e},n.isAuthenticated()&&e.go("dashboard")}app.component("loginForm",{templateUrl:"/components/login-form/login-form-template.html",controller:["$window","$state","authService",t]})}(),function(){"use strict";app.component("logo",{templateUrl:"/components/logo/logo-template.html"})}(),function(){"use strict";function t(t){var e=this;e.save=function(){t.save({name:e.experiment.name})}}app.component("newExperimentForm",{templateUrl:"/components/new-experiment-form/new-experiment-form-template.html",controller:["experimentsResource",t]})}(),function(){"use strict";function t(t){var e=this;e.save=function(){t.save({name:e.project.name})}}app.component("newProjectForm",{templateUrl:"/components/new-project-form/new-project-form-template.html",controller:["projectsResource",t]})}(),function(){"use strict";function t(t){var e=this;e.onMenuItemClick=function(e){t.path("/projects/"+e)},e.projects=[{name:"Teleflik",id:123}]}app.component("projectsMenu",{templateUrl:"/components/projects-menu/projects-menu-template.html",controller:["$location",t]})}(),function(){"use strict";app.component("viewport",{templateUrl:"/components/viewport/viewport-template.html",transclude:!0,bindings:{title:"="}})}(),function(){"use strict";function t(){}app.component("mainLayout",{templateUrl:"/layouts/main-layout/main-layout-template.html",transclude:!0,bindings:{viewportTitle:"@"},controller:t})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
